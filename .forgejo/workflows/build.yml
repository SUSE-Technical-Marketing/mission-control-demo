name: Build and Push Backend Services
on:
  push:
    branches: [main]
    paths:
      - 'backend/**'
      - 'frontend/**'
      - '.forgejo/workflows/**'
      - 'charts/**'
  pull_request:

env:
  IMAGE_REG: registry.hangar-bay.lab.geeko.me
  BACKEND_REPO: library/mission-control-backend
  FRONTEND_REPO: library/mission-control-frontend
  CHART_REPO: library/mission-control

jobs:

  build-backend:
    name: 'Build & push backend image'
    runs-on: docker
    container:
      image: catthehacker/ubuntu:act-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      # https://github.com/docker/setup-buildx-action
      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v3      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REG}}
          username: admin
          password: admin
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REG }}/${{ env.BACKEND_REPO }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: backend/services
          platforms: linux/amd64
          file: backend/services/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  build-frontend:
    name: 'Build & push frontend image'
    runs-on: docker
    container:
      image: catthehacker/ubuntu:act-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v4

      # https://github.com/docker/setup-buildx-action
      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v3      # Uses the `docker/login-action` action to log in to the Container registry registry using the account and password that will publish the packages. Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REG}}
          username: admin
          password: admin
      # This step uses [docker/metadata-action](https://github.com/docker/metadata-action#about) to extract tags and labels that will be applied to the specified image. The `id` "meta" allows the output of this step to be referenced in a subsequent step. The `images` value provides the base name for the tags and labels.
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_REG }}/${{ env.FRONTEND_REPO }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      # This step uses the `docker/build-push-action` action to build the image, based on your repository's `Dockerfile`. If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path. For more information, see "[Usage](https://github.com/docker/build-push-action#usage)" in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: frontend
          platforms: linux/amd64
          file: frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
  publish-helm-chart:
    name: 'Publish Helm Chart'
    runs-on: docker
    container:
      image: catthehacker/ubuntu:act-latest
    needs: [build-backend, build-frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set environment variables
        id: set-variables
        run: |
          echo "REPOSITORY=${{ env.IMAGE_REG }}/${{ env.CHART_REPO }}" >> "$GITHUB_OUTPUT"
          echo "VERSION=$(yq -r .version ./charts/mission-control/Chart.yaml)" >> "$GITHUB_OUTPUT"
      - name: Env variable output
        id: test-variables
        run: |
          echo ${{ steps.set-variables.outputs.REPOSITORY }}
          echo ${{ steps.set-variables.outputs.VERSION }}
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.IMAGE_REG}}
          username: admin
          password: admin

      - name: Package and push helm chart
        run: |
          helm package ./charts/mission-control --version ${{ steps.set-variables.outputs.VERSION }}
          helm push ./mission-control-${{ steps.set-variables.outputs.VERSION }}.tgz oci://${{ steps.set-variables.outputs.REPOSITORY }}/charts
